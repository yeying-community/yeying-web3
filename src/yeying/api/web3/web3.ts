// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: yeying/api/web3/web3.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "yeying.api.web3";

/** 身份编码 */
export enum IdentityCodeEnum {
  /** IDENTITY_CODE_UNKNOWN - 未知编码，是一种占位符 */
  IDENTITY_CODE_UNKNOWN = 0,
  /** IDENTITY_CODE_PERSONAL - 与个人相关的身份 */
  IDENTITY_CODE_PERSONAL = 1,
  /** IDENTITY_CODE_ORGANIZATION - 与组织相关的身份 */
  IDENTITY_CODE_ORGANIZATION = 2,
  /** IDENTITY_CODE_SERVICE - 与服务相关的身份 */
  IDENTITY_CODE_SERVICE = 3,
  /** IDENTITY_CODE_APPLICATION - 与应用相关的身份 */
  IDENTITY_CODE_APPLICATION = 4,
  /** IDENTITY_CODE_ASSET - 与资产相关的身份 */
  IDENTITY_CODE_ASSET = 5,
  UNRECOGNIZED = -1,
}

export function identityCodeEnumFromJSON(object: any): IdentityCodeEnum {
  switch (object) {
    case 0:
    case "IDENTITY_CODE_UNKNOWN":
      return IdentityCodeEnum.IDENTITY_CODE_UNKNOWN;
    case 1:
    case "IDENTITY_CODE_PERSONAL":
      return IdentityCodeEnum.IDENTITY_CODE_PERSONAL;
    case 2:
    case "IDENTITY_CODE_ORGANIZATION":
      return IdentityCodeEnum.IDENTITY_CODE_ORGANIZATION;
    case 3:
    case "IDENTITY_CODE_SERVICE":
      return IdentityCodeEnum.IDENTITY_CODE_SERVICE;
    case 4:
    case "IDENTITY_CODE_APPLICATION":
      return IdentityCodeEnum.IDENTITY_CODE_APPLICATION;
    case 5:
    case "IDENTITY_CODE_ASSET":
      return IdentityCodeEnum.IDENTITY_CODE_ASSET;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IdentityCodeEnum.UNRECOGNIZED;
  }
}

export function identityCodeEnumToJSON(object: IdentityCodeEnum): string {
  switch (object) {
    case IdentityCodeEnum.IDENTITY_CODE_UNKNOWN:
      return "IDENTITY_CODE_UNKNOWN";
    case IdentityCodeEnum.IDENTITY_CODE_PERSONAL:
      return "IDENTITY_CODE_PERSONAL";
    case IdentityCodeEnum.IDENTITY_CODE_ORGANIZATION:
      return "IDENTITY_CODE_ORGANIZATION";
    case IdentityCodeEnum.IDENTITY_CODE_SERVICE:
      return "IDENTITY_CODE_SERVICE";
    case IdentityCodeEnum.IDENTITY_CODE_APPLICATION:
      return "IDENTITY_CODE_APPLICATION";
    case IdentityCodeEnum.IDENTITY_CODE_ASSET:
      return "IDENTITY_CODE_ASSET";
    case IdentityCodeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 区块链网络类型 */
export enum NetworkTypeEnum {
  /** NETWORK_TYPE_UNKNOWN - 未知编码，是一种占位符 */
  NETWORK_TYPE_UNKNOWN = 0,
  /** NETWORK_TYPE_YEYING - 夜莺网络 */
  NETWORK_TYPE_YEYING = 2020,
  UNRECOGNIZED = -1,
}

export function networkTypeEnumFromJSON(object: any): NetworkTypeEnum {
  switch (object) {
    case 0:
    case "NETWORK_TYPE_UNKNOWN":
      return NetworkTypeEnum.NETWORK_TYPE_UNKNOWN;
    case 2020:
    case "NETWORK_TYPE_YEYING":
      return NetworkTypeEnum.NETWORK_TYPE_YEYING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkTypeEnum.UNRECOGNIZED;
  }
}

export function networkTypeEnumToJSON(object: NetworkTypeEnum): string {
  switch (object) {
    case NetworkTypeEnum.NETWORK_TYPE_UNKNOWN:
      return "NETWORK_TYPE_UNKNOWN";
    case NetworkTypeEnum.NETWORK_TYPE_YEYING:
      return "NETWORK_TYPE_YEYING";
    case NetworkTypeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Identity {
  metadata: IdentityMetadata | undefined;
  blockAddress: string;
  securityConfig: SecurityConfig | undefined;
  registry: Registry | undefined;
  signature: string;
  personalExtend?: IdentityPersonalExtend | undefined;
  serviceExtend?: IdentityServiceExtend | undefined;
  organizationExtend?: IdentityOrganizationExtend | undefined;
  applicationExtend?: IdentityApplicationExtend | undefined;
}

export interface Registry {
  nodes: string[];
}

export interface IdentityMetadata {
  /** 身份父亲 */
  parent: string;
  /** 身份所在网络 */
  network: NetworkTypeEnum;
  /** 身份did */
  did: string;
  /** 身份版本 */
  version: number;
  /** 区块链地址 */
  address: string;
  /** 身份名称 */
  name: string;
  /** 身份描述 */
  description: string;
  /** 身份编码 */
  code: IdentityCodeEnum;
  /** 身份头像 */
  avatar: string;
  /** 身份创建utc时间 */
  createdAt: string;
  /** 身份修改utc时间 */
  updatedAt: string;
}

export interface BlockAddress {
  identifier: string;
  address: string;
  privateKey: string;
  publicKey: string;
  mnemonic: Mnemonic | undefined;
}

export interface Mnemonic {
  phrase: string;
  path: string;
  locale: string;
  password: string;
}

export interface IdentityServiceExtend {
  code: string;
  /** 应用输出的api编码，用逗号隔开 */
  apis: string;
  proxy: string;
  grpc: string;
  extend: string;
}

export interface IdentityOrganizationExtend {
  address: string;
  code: string;
  extend: string;
}

export interface IdentityPersonalExtend {
  email: string;
  telephone: string;
  extend: string;
}

export interface IdentityApplicationExtend {
  code: string;
  /** 应用依赖的服务编码，用逗号隔开 */
  serviceCodes: string;
  location: string;
  hash: string;
  extend: string;
}

export interface SecurityConfig {
  algorithm: SecurityAlgorithm | undefined;
}

export interface SecurityAlgorithm {
  name: string;
  iv: string;
}

function createBaseIdentity(): Identity {
  return {
    metadata: undefined,
    blockAddress: "",
    securityConfig: undefined,
    registry: undefined,
    signature: "",
    personalExtend: undefined,
    serviceExtend: undefined,
    organizationExtend: undefined,
    applicationExtend: undefined,
  };
}

export const Identity: MessageFns<Identity> = {
  encode(message: Identity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      IdentityMetadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.blockAddress !== "") {
      writer.uint32(18).string(message.blockAddress);
    }
    if (message.securityConfig !== undefined) {
      SecurityConfig.encode(message.securityConfig, writer.uint32(26).fork()).join();
    }
    if (message.registry !== undefined) {
      Registry.encode(message.registry, writer.uint32(34).fork()).join();
    }
    if (message.signature !== "") {
      writer.uint32(42).string(message.signature);
    }
    if (message.personalExtend !== undefined) {
      IdentityPersonalExtend.encode(message.personalExtend, writer.uint32(50).fork()).join();
    }
    if (message.serviceExtend !== undefined) {
      IdentityServiceExtend.encode(message.serviceExtend, writer.uint32(58).fork()).join();
    }
    if (message.organizationExtend !== undefined) {
      IdentityOrganizationExtend.encode(message.organizationExtend, writer.uint32(66).fork()).join();
    }
    if (message.applicationExtend !== undefined) {
      IdentityApplicationExtend.encode(message.applicationExtend, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Identity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = IdentityMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.blockAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.securityConfig = SecurityConfig.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.registry = Registry.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.personalExtend = IdentityPersonalExtend.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.serviceExtend = IdentityServiceExtend.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.organizationExtend = IdentityOrganizationExtend.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.applicationExtend = IdentityApplicationExtend.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Identity {
    return {
      metadata: isSet(object.metadata) ? IdentityMetadata.fromJSON(object.metadata) : undefined,
      blockAddress: isSet(object.blockAddress) ? globalThis.String(object.blockAddress) : "",
      securityConfig: isSet(object.securityConfig) ? SecurityConfig.fromJSON(object.securityConfig) : undefined,
      registry: isSet(object.registry) ? Registry.fromJSON(object.registry) : undefined,
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      personalExtend: isSet(object.personalExtend) ? IdentityPersonalExtend.fromJSON(object.personalExtend) : undefined,
      serviceExtend: isSet(object.serviceExtend) ? IdentityServiceExtend.fromJSON(object.serviceExtend) : undefined,
      organizationExtend: isSet(object.organizationExtend)
        ? IdentityOrganizationExtend.fromJSON(object.organizationExtend)
        : undefined,
      applicationExtend: isSet(object.applicationExtend)
        ? IdentityApplicationExtend.fromJSON(object.applicationExtend)
        : undefined,
    };
  },

  toJSON(message: Identity): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = IdentityMetadata.toJSON(message.metadata);
    }
    if (message.blockAddress !== "") {
      obj.blockAddress = message.blockAddress;
    }
    if (message.securityConfig !== undefined) {
      obj.securityConfig = SecurityConfig.toJSON(message.securityConfig);
    }
    if (message.registry !== undefined) {
      obj.registry = Registry.toJSON(message.registry);
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.personalExtend !== undefined) {
      obj.personalExtend = IdentityPersonalExtend.toJSON(message.personalExtend);
    }
    if (message.serviceExtend !== undefined) {
      obj.serviceExtend = IdentityServiceExtend.toJSON(message.serviceExtend);
    }
    if (message.organizationExtend !== undefined) {
      obj.organizationExtend = IdentityOrganizationExtend.toJSON(message.organizationExtend);
    }
    if (message.applicationExtend !== undefined) {
      obj.applicationExtend = IdentityApplicationExtend.toJSON(message.applicationExtend);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Identity>, I>>(base?: I): Identity {
    return Identity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Identity>, I>>(object: I): Identity {
    const message = createBaseIdentity();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? IdentityMetadata.fromPartial(object.metadata)
      : undefined;
    message.blockAddress = object.blockAddress ?? "";
    message.securityConfig = (object.securityConfig !== undefined && object.securityConfig !== null)
      ? SecurityConfig.fromPartial(object.securityConfig)
      : undefined;
    message.registry = (object.registry !== undefined && object.registry !== null)
      ? Registry.fromPartial(object.registry)
      : undefined;
    message.signature = object.signature ?? "";
    message.personalExtend = (object.personalExtend !== undefined && object.personalExtend !== null)
      ? IdentityPersonalExtend.fromPartial(object.personalExtend)
      : undefined;
    message.serviceExtend = (object.serviceExtend !== undefined && object.serviceExtend !== null)
      ? IdentityServiceExtend.fromPartial(object.serviceExtend)
      : undefined;
    message.organizationExtend = (object.organizationExtend !== undefined && object.organizationExtend !== null)
      ? IdentityOrganizationExtend.fromPartial(object.organizationExtend)
      : undefined;
    message.applicationExtend = (object.applicationExtend !== undefined && object.applicationExtend !== null)
      ? IdentityApplicationExtend.fromPartial(object.applicationExtend)
      : undefined;
    return message;
  },
};

function createBaseRegistry(): Registry {
  return { nodes: [] };
}

export const Registry: MessageFns<Registry> = {
  encode(message: Registry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nodes) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Registry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegistry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nodes.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Registry {
    return { nodes: globalThis.Array.isArray(object?.nodes) ? object.nodes.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: Registry): unknown {
    const obj: any = {};
    if (message.nodes?.length) {
      obj.nodes = message.nodes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Registry>, I>>(base?: I): Registry {
    return Registry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Registry>, I>>(object: I): Registry {
    const message = createBaseRegistry();
    message.nodes = object.nodes?.map((e) => e) || [];
    return message;
  },
};

function createBaseIdentityMetadata(): IdentityMetadata {
  return {
    parent: "",
    network: 0,
    did: "",
    version: 0,
    address: "",
    name: "",
    description: "",
    code: 0,
    avatar: "",
    createdAt: "",
    updatedAt: "",
  };
}

export const IdentityMetadata: MessageFns<IdentityMetadata> = {
  encode(message: IdentityMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.network !== 0) {
      writer.uint32(16).int32(message.network);
    }
    if (message.did !== "") {
      writer.uint32(26).string(message.did);
    }
    if (message.version !== 0) {
      writer.uint32(32).uint32(message.version);
    }
    if (message.address !== "") {
      writer.uint32(42).string(message.address);
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    if (message.code !== 0) {
      writer.uint32(64).int32(message.code);
    }
    if (message.avatar !== "") {
      writer.uint32(74).string(message.avatar);
    }
    if (message.createdAt !== "") {
      writer.uint32(82).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(90).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.network = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.did = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityMetadata {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      network: isSet(object.network) ? networkTypeEnumFromJSON(object.network) : 0,
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      code: isSet(object.code) ? identityCodeEnumFromJSON(object.code) : 0,
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: IdentityMetadata): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.network !== 0) {
      obj.network = networkTypeEnumToJSON(message.network);
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.code !== 0) {
      obj.code = identityCodeEnumToJSON(message.code);
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityMetadata>, I>>(base?: I): IdentityMetadata {
    return IdentityMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdentityMetadata>, I>>(object: I): IdentityMetadata {
    const message = createBaseIdentityMetadata();
    message.parent = object.parent ?? "";
    message.network = object.network ?? 0;
    message.did = object.did ?? "";
    message.version = object.version ?? 0;
    message.address = object.address ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.code = object.code ?? 0;
    message.avatar = object.avatar ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseBlockAddress(): BlockAddress {
  return { identifier: "", address: "", privateKey: "", publicKey: "", mnemonic: undefined };
}

export const BlockAddress: MessageFns<BlockAddress> = {
  encode(message: BlockAddress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identifier !== "") {
      writer.uint32(10).string(message.identifier);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.privateKey !== "") {
      writer.uint32(26).string(message.privateKey);
    }
    if (message.publicKey !== "") {
      writer.uint32(34).string(message.publicKey);
    }
    if (message.mnemonic !== undefined) {
      Mnemonic.encode(message.mnemonic, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockAddress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identifier = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.privateKey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.publicKey = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.mnemonic = Mnemonic.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockAddress {
    return {
      identifier: isSet(object.identifier) ? globalThis.String(object.identifier) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      privateKey: isSet(object.privateKey) ? globalThis.String(object.privateKey) : "",
      publicKey: isSet(object.publicKey) ? globalThis.String(object.publicKey) : "",
      mnemonic: isSet(object.mnemonic) ? Mnemonic.fromJSON(object.mnemonic) : undefined,
    };
  },

  toJSON(message: BlockAddress): unknown {
    const obj: any = {};
    if (message.identifier !== "") {
      obj.identifier = message.identifier;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.privateKey !== "") {
      obj.privateKey = message.privateKey;
    }
    if (message.publicKey !== "") {
      obj.publicKey = message.publicKey;
    }
    if (message.mnemonic !== undefined) {
      obj.mnemonic = Mnemonic.toJSON(message.mnemonic);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockAddress>, I>>(base?: I): BlockAddress {
    return BlockAddress.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockAddress>, I>>(object: I): BlockAddress {
    const message = createBaseBlockAddress();
    message.identifier = object.identifier ?? "";
    message.address = object.address ?? "";
    message.privateKey = object.privateKey ?? "";
    message.publicKey = object.publicKey ?? "";
    message.mnemonic = (object.mnemonic !== undefined && object.mnemonic !== null)
      ? Mnemonic.fromPartial(object.mnemonic)
      : undefined;
    return message;
  },
};

function createBaseMnemonic(): Mnemonic {
  return { phrase: "", path: "", locale: "", password: "" };
}

export const Mnemonic: MessageFns<Mnemonic> = {
  encode(message: Mnemonic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phrase !== "") {
      writer.uint32(10).string(message.phrase);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.locale !== "") {
      writer.uint32(26).string(message.locale);
    }
    if (message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Mnemonic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMnemonic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.phrase = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.locale = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Mnemonic {
    return {
      phrase: isSet(object.phrase) ? globalThis.String(object.phrase) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      locale: isSet(object.locale) ? globalThis.String(object.locale) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: Mnemonic): unknown {
    const obj: any = {};
    if (message.phrase !== "") {
      obj.phrase = message.phrase;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.locale !== "") {
      obj.locale = message.locale;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Mnemonic>, I>>(base?: I): Mnemonic {
    return Mnemonic.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Mnemonic>, I>>(object: I): Mnemonic {
    const message = createBaseMnemonic();
    message.phrase = object.phrase ?? "";
    message.path = object.path ?? "";
    message.locale = object.locale ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseIdentityServiceExtend(): IdentityServiceExtend {
  return { code: "", apis: "", proxy: "", grpc: "", extend: "" };
}

export const IdentityServiceExtend: MessageFns<IdentityServiceExtend> = {
  encode(message: IdentityServiceExtend, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.apis !== "") {
      writer.uint32(18).string(message.apis);
    }
    if (message.proxy !== "") {
      writer.uint32(26).string(message.proxy);
    }
    if (message.grpc !== "") {
      writer.uint32(34).string(message.grpc);
    }
    if (message.extend !== "") {
      writer.uint32(42).string(message.extend);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityServiceExtend {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityServiceExtend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.apis = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proxy = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.grpc = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.extend = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityServiceExtend {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      apis: isSet(object.apis) ? globalThis.String(object.apis) : "",
      proxy: isSet(object.proxy) ? globalThis.String(object.proxy) : "",
      grpc: isSet(object.grpc) ? globalThis.String(object.grpc) : "",
      extend: isSet(object.extend) ? globalThis.String(object.extend) : "",
    };
  },

  toJSON(message: IdentityServiceExtend): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.apis !== "") {
      obj.apis = message.apis;
    }
    if (message.proxy !== "") {
      obj.proxy = message.proxy;
    }
    if (message.grpc !== "") {
      obj.grpc = message.grpc;
    }
    if (message.extend !== "") {
      obj.extend = message.extend;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityServiceExtend>, I>>(base?: I): IdentityServiceExtend {
    return IdentityServiceExtend.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdentityServiceExtend>, I>>(object: I): IdentityServiceExtend {
    const message = createBaseIdentityServiceExtend();
    message.code = object.code ?? "";
    message.apis = object.apis ?? "";
    message.proxy = object.proxy ?? "";
    message.grpc = object.grpc ?? "";
    message.extend = object.extend ?? "";
    return message;
  },
};

function createBaseIdentityOrganizationExtend(): IdentityOrganizationExtend {
  return { address: "", code: "", extend: "" };
}

export const IdentityOrganizationExtend: MessageFns<IdentityOrganizationExtend> = {
  encode(message: IdentityOrganizationExtend, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.extend !== "") {
      writer.uint32(26).string(message.extend);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityOrganizationExtend {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityOrganizationExtend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.extend = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityOrganizationExtend {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      extend: isSet(object.extend) ? globalThis.String(object.extend) : "",
    };
  },

  toJSON(message: IdentityOrganizationExtend): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.extend !== "") {
      obj.extend = message.extend;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityOrganizationExtend>, I>>(base?: I): IdentityOrganizationExtend {
    return IdentityOrganizationExtend.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdentityOrganizationExtend>, I>>(object: I): IdentityOrganizationExtend {
    const message = createBaseIdentityOrganizationExtend();
    message.address = object.address ?? "";
    message.code = object.code ?? "";
    message.extend = object.extend ?? "";
    return message;
  },
};

function createBaseIdentityPersonalExtend(): IdentityPersonalExtend {
  return { email: "", telephone: "", extend: "" };
}

export const IdentityPersonalExtend: MessageFns<IdentityPersonalExtend> = {
  encode(message: IdentityPersonalExtend, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.telephone !== "") {
      writer.uint32(18).string(message.telephone);
    }
    if (message.extend !== "") {
      writer.uint32(26).string(message.extend);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityPersonalExtend {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityPersonalExtend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.telephone = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.extend = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityPersonalExtend {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      telephone: isSet(object.telephone) ? globalThis.String(object.telephone) : "",
      extend: isSet(object.extend) ? globalThis.String(object.extend) : "",
    };
  },

  toJSON(message: IdentityPersonalExtend): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.telephone !== "") {
      obj.telephone = message.telephone;
    }
    if (message.extend !== "") {
      obj.extend = message.extend;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityPersonalExtend>, I>>(base?: I): IdentityPersonalExtend {
    return IdentityPersonalExtend.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdentityPersonalExtend>, I>>(object: I): IdentityPersonalExtend {
    const message = createBaseIdentityPersonalExtend();
    message.email = object.email ?? "";
    message.telephone = object.telephone ?? "";
    message.extend = object.extend ?? "";
    return message;
  },
};

function createBaseIdentityApplicationExtend(): IdentityApplicationExtend {
  return { code: "", serviceCodes: "", location: "", hash: "", extend: "" };
}

export const IdentityApplicationExtend: MessageFns<IdentityApplicationExtend> = {
  encode(message: IdentityApplicationExtend, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.serviceCodes !== "") {
      writer.uint32(18).string(message.serviceCodes);
    }
    if (message.location !== "") {
      writer.uint32(26).string(message.location);
    }
    if (message.hash !== "") {
      writer.uint32(34).string(message.hash);
    }
    if (message.extend !== "") {
      writer.uint32(42).string(message.extend);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityApplicationExtend {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityApplicationExtend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serviceCodes = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.hash = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.extend = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityApplicationExtend {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      serviceCodes: isSet(object.serviceCodes) ? globalThis.String(object.serviceCodes) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
      extend: isSet(object.extend) ? globalThis.String(object.extend) : "",
    };
  },

  toJSON(message: IdentityApplicationExtend): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.serviceCodes !== "") {
      obj.serviceCodes = message.serviceCodes;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    if (message.extend !== "") {
      obj.extend = message.extend;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityApplicationExtend>, I>>(base?: I): IdentityApplicationExtend {
    return IdentityApplicationExtend.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdentityApplicationExtend>, I>>(object: I): IdentityApplicationExtend {
    const message = createBaseIdentityApplicationExtend();
    message.code = object.code ?? "";
    message.serviceCodes = object.serviceCodes ?? "";
    message.location = object.location ?? "";
    message.hash = object.hash ?? "";
    message.extend = object.extend ?? "";
    return message;
  },
};

function createBaseSecurityConfig(): SecurityConfig {
  return { algorithm: undefined };
}

export const SecurityConfig: MessageFns<SecurityConfig> = {
  encode(message: SecurityConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.algorithm !== undefined) {
      SecurityAlgorithm.encode(message.algorithm, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.algorithm = SecurityAlgorithm.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityConfig {
    return { algorithm: isSet(object.algorithm) ? SecurityAlgorithm.fromJSON(object.algorithm) : undefined };
  },

  toJSON(message: SecurityConfig): unknown {
    const obj: any = {};
    if (message.algorithm !== undefined) {
      obj.algorithm = SecurityAlgorithm.toJSON(message.algorithm);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SecurityConfig>, I>>(base?: I): SecurityConfig {
    return SecurityConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SecurityConfig>, I>>(object: I): SecurityConfig {
    const message = createBaseSecurityConfig();
    message.algorithm = (object.algorithm !== undefined && object.algorithm !== null)
      ? SecurityAlgorithm.fromPartial(object.algorithm)
      : undefined;
    return message;
  },
};

function createBaseSecurityAlgorithm(): SecurityAlgorithm {
  return { name: "", iv: "" };
}

export const SecurityAlgorithm: MessageFns<SecurityAlgorithm> = {
  encode(message: SecurityAlgorithm, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.iv !== "") {
      writer.uint32(18).string(message.iv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityAlgorithm {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityAlgorithm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.iv = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityAlgorithm {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      iv: isSet(object.iv) ? globalThis.String(object.iv) : "",
    };
  },

  toJSON(message: SecurityAlgorithm): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.iv !== "") {
      obj.iv = message.iv;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SecurityAlgorithm>, I>>(base?: I): SecurityAlgorithm {
    return SecurityAlgorithm.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SecurityAlgorithm>, I>>(object: I): SecurityAlgorithm {
    const message = createBaseSecurityAlgorithm();
    message.name = object.name ?? "";
    message.iv = object.iv ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
